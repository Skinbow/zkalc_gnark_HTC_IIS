{"mul_ff": {"arguments": "n", "body": "return n * 17;"}, "add_ff": {"arguments": "n", "body": "return n * 4;"}, "add_ec": {"arguments": "n", "body": "return n * 750;"}, "msm_G1": {"arguments": "n", "body": "\n        const polynomials = [[-101774.77102003148, 411474.92223725066], [36020.21505840268, 135884.95008038235], [38006.28083012838, 127940.68699347955], [32207.816349824912, 174328.4028359073], [-26596.650533406577, 1115199.872967611], [2702.0232596054393, 177642.3115912266], [2168.8498638520623, 211765.40891944274], [2123.184387320294, 217610.5899155091], [1812.9664985001014, 297026.3694534784], [1859.2146141502026, 273347.33424062654], [1404.290687233114, 739189.4354037251], [1046.0790551370296, 1472806.8579365062], [1151.763408257378, 1039923.7475555595], [1246.0573977050776, 267467.38600000367], [1157.5959439086917, 1716819.8449999914], [905.6270088195802, 9973337.909999996], [864.8728250122069, 12644204.100000009], [831.0654447174073, 17075405.049999982], [872.5095320129394, 6211086.230000019], [1847.516359386444, -504973293.28], [380.2833121013641, 1033532066.51]];\n        const ranges = [[1, 2], [2, 4], [4, 8], [8, 16], [16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024], [1024, 2048], [2048, 4096], [4096, 8192], [8192, 16384], [16384, 32768], [32768, 65536], [65536, 131072], [131072, 262144], [262144, 524288], [524288, 1048576], [1048576, 2097152]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}, "msm_G2": {"arguments": "n", "body": "\n        const polynomials = [[-81298.10166620417, 672716.472556025], [98815.52205697261, 312489.2251096715], [100446.72022134933, 305964.4324521646], [85312.9164328439, 427034.8627602081], [-75682.93100871524, 3002968.421825154], [6206.550115854796, 382505.02583891316], [5685.8430152461115, 415830.28027786897], [6095.391309626464, 363408.0985971838], [4871.612082083755, 676695.5808481174], [5122.6563494194925, 548160.9159722198], [3578.556947157116, 2129318.703888893], [3090.875753580729, 3128089.788333334], [3274.021407470703, 2377925.1900000013], [3337.1271899414064, 1860962.6199999973], [2588.6757702636714, 14123590.680000007], [2294.8179766845706, 23752722.859999985], [2373.1902505493167, 18616517.51999998], [2321.26369140625, 25422635.48000002], [2882.2733243179323, -121642673.73000002], [1764.9473777770995, 464157912.1300001], [2134.597582435608, 76551579.13000011]];\n        const ranges = [[1, 2], [2, 4], [4, 8], [8, 16], [16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024], [1024, 2048], [2048, 4096], [4096, 8192], [8192, 16384], [16384, 32768], [32768, 65536], [65536, 131072], [131072, 262144], [262144, 524288], [524288, 1048576], [1048576, 2097152]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}, "invert": {"arguments": "n", "body": "return n * 1464;"}, "pairing": {"arguments": "n", "body": "return n * 485550;"}, "pairing_product": {"arguments": "n", "body": "\n        const polynomials = [[168409.04723355253, -19493.420473681763], [141233.17981250005, 850134.3369999975], [159331.2664322918, -308143.20666667446], [146301.49174479162, 1359667.953333348], [160687.33101562498, -2323106.899999991], [145257.20628906248, 5577116.960000008]];\n        const ranges = [[16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}}

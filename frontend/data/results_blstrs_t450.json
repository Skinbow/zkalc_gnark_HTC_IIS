{"mul_ff": {"arguments": "n", "body": "return n * 25;"}, "mul_ec": {"arguments": "n", "body": "return n * 99823;"}, "add_ff": {"arguments": "n", "body": "return n * 8;"}, "add_ec": {"arguments": "n", "body": "return n * 792;"}, "msm_G1": {"arguments": "n", "body": "\n        const polynomials = [[75402.2679742057, 176214.73558816884], [55885.50551736416, 254281.78541553498], [67643.87550385496, 160214.8255236086], [-23632.770561028512, 1620641.162561744], [15084.726887677043, 381681.24420316634], [12838.598476335967, 525433.4625289952], [11622.159428013409, 681137.6607142827], [10213.387292829237, 1041783.3273214307], [9727.517618652346, 1290548.6004999988], [7690.205912760415, 3376755.7873333357], [8385.66385172526, 1952457.9283333346], [6448.041817626954, 9888957.779999994], [6301.653084716797, 11088174.280000001], [5830.082038574218, 18814394.300000012], [5519.898923339843, 28978474.620000005], [5556.91071395874, 26552869.909999967], [4930.5485955810545, 108651405.49000001], [4543.164632797242, 210201787.02999973], [4529.719216537475, 217251057.4300003], [4404.8816843700415, 348152697.55999947]];\n        const ranges = [[2, 4], [4, 8], [8, 16], [16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024], [1024, 2048], [2048, 4096], [4096, 8192], [8192, 16384], [16384, 32768], [32768, 65536], [65536, 131072], [131072, 262144], [262144, 524288], [524288, 1048576], [1048576, 2097152]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}, "msm_G2": {"arguments": "n", "body": "\n        const polynomials = [[186002.16459638445, 382767.6830850784], [125159.0333355359, 626140.2081284726], [140836.1734773524, 500723.08699394064], [-33441.066849256254, 3289158.932219679], [38297.956779891305, 993510.1760869571], [35486.473611111105, 1173445.09888889], [31219.317309027785, 1719641.1055555549], [27300.280891927076, 2722914.4283333365], [25983.771123046874, 3396967.4299999997], [21073.609062500003, 8424973.379999995], [22580.547988281247, 5338762.460000008], [16906.684709472658, 28578906.449999988], [16863.540734863283, 28932341.889999986], [16202.778713989257, 39758266.84000003], [14668.870791625977, 90021361.63999999], [14764.987689208983, 83722244.6400001], [13373.221987838744, 266143758.6500001], [12016.193108291625, 621880737.25], [11957.325404968264, 652744367.6899986], [11870.90236260414, 743365495.7600021]];\n        const ranges = [[2, 4], [4, 8], [8, 16], [16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024], [1024, 2048], [2048, 4096], [4096, 8192], [8192, 16384], [16384, 32768], [32768, 65536], [65536, 131072], [131072, 262144], [262144, 524288], [524288, 1048576], [1048576, 2097152]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}, "invert": {"arguments": "n", "body": "return n * 1776;"}, "pairing": {"arguments": "n", "body": "return n * 792700;"}, "pairing_product": {"arguments": "n", "body": "\n        const polynomials = [[242905.34067708347, 467683.2483333321], [242552.39703124992, 478977.4450000059], [242207.48249999998, 501051.9750000015], [243895.26847656252, 285015.3699999973], [242093.3283984375, 746312.0300000012], [242453.70830078123, 561797.5200000107]];\n        const ranges = [[16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}}
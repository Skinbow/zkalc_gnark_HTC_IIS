{"mul_ff": {"arguments": "n", "body": "return n * 33;"}, "mul_ec": {"arguments": "n", "body": "return n * 264822;"}, "add_ff": {"arguments": "n", "body": "return n * 4;"}, "add_ec": {"arguments": "n", "body": "return n * 1079;"}, "msm_G1": {"arguments": "n", "body": "\n        const polynomials = [[47792.60125537132, 382908.6478600212], [41877.39795699116, 406569.46105354186], [33379.944835649396, 474549.086024276], [36008.22183147872, 432496.65409100684], [28667.65572817732, 667394.7693966515], [19324.31410267856, 1265368.6334285722], [19827.853956473216, 1200915.5321428562], [16743.47400390626, 1990516.799999997], [13666.487949218747, 3565933.660000004], [14144.704375000001, 3076240.039999999], [12168.13693847656, 7124250.150000006], [11788.992998046877, 8677223.72999999], [10220.21775390625, 21528630.53], [10413.358590087892, 18364211.069999993], [8416.858094787596, 83785539.30000007], [8689.924953460695, 65889829.64999986], [8762.126454315185, 56426234.53000021], [8022.4067753982545, 250339310.03999996], [8021.900055847167, 250604977.02000046], [6642.958103580475, 1696530413.5599995]];\n        const ranges = [[2, 4], [4, 8], [8, 16], [16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024], [1024, 2048], [2048, 4096], [4096, 8192], [8192, 16384], [16384, 32768], [32768, 65536], [65536, 131072], [131072, 262144], [262144, 524288], [524288, 1048576], [1048576, 2097152]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}, "msm_G2": {"arguments": "n", "body": "\n        const polynomials = [[165055.31698466663, 933613.0403913637], [122924.32083415915, 1102137.0249933936], [102813.84347222245, 1263020.8438888872], [108428.68458017666, 1173183.3861616198], [86834.5828165584, 1864194.6425974043], [58397.91736160715, 3684141.231714284], [60525.29106250001, 3411837.397999998], [51915.45769531249, 5615954.740000002], [41480.18416015625, 10958814.79], [43508.33541015625, 8881987.909999996], [38481.39792480469, 19177155.879999995], [35819.7465625, 30079279.860000014], [30793.58012817383, 71253635.28999996], [30505.381309814453, 75975484.73000002], [26161.199472045897, 218325635.19000006], [26534.00427032471, 193893499.92999983], [25610.49505317688, 314939700.03999996], [23993.697330932613, 738773522.1400013], [23956.591243667604, 758227798.4199982], [19268.708868560792, 5673828747.779999]];\n        const ranges = [[2, 4], [4, 8], [8, 16], [16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024], [1024, 2048], [2048, 4096], [4096, 8192], [8192, 16384], [16384, 32768], [32768, 65536], [65536, 131072], [131072, 262144], [262144, 524288], [524288, 1048576], [1048576, 2097152]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}, "invert": {"arguments": "n", "body": "return n * 2625;"}, "pairing": {"arguments": "n", "body": "return n * 1661366;"}, "pairing_product": {"arguments": "n", "body": "\n        const polynomials = [[350546.989859375, 1215499.5085000005], [353330.18831249967, 1126437.158000011], [352043.5641406251, 1208781.1049999818], [352371.8237109375, 1166763.8799999952], [351588.06625000003, 1367405.7899999917], [350114.9272070312, 2121652.980000019]];\n        const ranges = [[16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}}
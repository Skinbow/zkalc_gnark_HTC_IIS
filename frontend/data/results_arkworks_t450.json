{"mul_ec": {"arguments": "n", "body": "return n * 263338;"}, "add_ff": {"arguments": "n", "body": "return n * 4;"}, "add_ec": {"arguments": "n", "body": "return n * 1079;"}, "msm_G1": {"arguments": "n", "body": "\n        const polynomials = [[40104.77325381615, 409352.73057731544], [42690.7419700645, 399008.85571232205], [33079.14036741493, 475901.66853351856], [35740.180663399304, 433325.02379776863], [28840.090095896616, 654127.9219578546], [19497.845677083315, 1252031.564761906], [19754.686258370544, 1219155.9703571405], [16771.418857421886, 1982872.424999997], [13602.300592447908, 3605460.976666674], [14219.345997721357, 2973606.481666662], [12115.451477050781, 7282382.460000001], [11805.824311523438, 8550615.329999998], [10200.840419921875, 21698643.370000005], [10519.726844482422, 16474008.189999998], [8346.219694213867, 87695490.49000001], [8716.409294891359, 63434744.81999993], [8768.208083953858, 56645373.94000006], [8039.689563179016, 247622133.0500002], [8019.440851688385, 258238289.5], [6623.012553215027, 1722499489.0]];\n        const ranges = [[2, 4], [4, 8], [8, 16], [16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024], [1024, 2048], [2048, 4096], [4096, 8192], [8192, 16384], [16384, 32768], [32768, 65536], [65536, 131072], [131072, 262144], [262144, 524288], [524288, 1048576], [1048576, 2097152]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}, "msm_G2": {"arguments": "n", "body": "\n        const polynomials = [[161413.88427616807, 946068.9887641636], [123911.6983244578, 1096077.7325710047], [101909.45429534299, 1272095.6848039231], [109211.85568850278, 1155257.2625133665], [87069.4305275974, 1863814.8676623385], [58659.98704017856, 3682019.2508571446], [59658.7803489583, 3554173.7073333375], [52168.53829427085, 5471675.6733333245], [41767.865078125, 10796820.36], [43379.23954101562, 9146772.910000011], [38115.857226562504, 19926179.889999986], [35943.713542480466, 28823280.420000017], [30788.99349487305, 71050747.04999995], [30375.54520019531, 77824683.91000009], [26171.89132324219, 215570014.14999986], [26650.520080108643, 184202599.94000006], [25574.265529327393, 325269436.4200001], [24019.891018791197, 732739388.1100006], [23988.516525058745, 749188658.6800003], [19292.778899517063, 5673026435.119995]];\n        const ranges = [[2, 4], [4, 8], [8, 16], [16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024], [1024, 2048], [2048, 4096], [4096, 8192], [8192, 16384], [16384, 32768], [32768, 65536], [65536, 131072], [131072, 262144], [262144, 524288], [524288, 1048576], [1048576, 2097152]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}, "invert": {"arguments": "n", "body": "return n * 2615;"}, "pairing": {"arguments": "n", "body": "return n * 1648297;"}, "pairing_product": {"arguments": "n", "body": "\n        const polynomials = [[355764.50078125, 1120859.9375], [355796.9994010416, 1119819.9816666692], [352592.13963541674, 1324931.0066666603], [353807.65867187496, 1169344.5700000077], [352221.7759765625, 1575330.5399999917], [352030.0733203125, 1673482.300000012]];\n        const ranges = [[16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}}
{"mul": {"arguments": "n", "body": "return n * 13;"}, "add_ff": {"arguments": "n", "body": "return n * 3;"}, "msm_G1": {"arguments": "n", "body": "const polynomials = [[-25507.12114426776, 1079426.3651348567],[2581.919217350509, 180577.0735630722],[2544.8234465552405, 182951.20289396937],[2049.578118552323, 246342.60487834283],[1786.0143733374184, 313814.92365335836],[1881.3363573817196, 265010.06782267615],[1394.0384110074983, 764003.1649098787],[1178.82563183087, 1204758.9366636137],[1049.790714586046, 1733285.9576984122],[1146.2957854333301, 942716.4173174612],[1175.397574945036, 465912.6979576722],[900.0628026045945, 9488082.51800926],[994.0194652003331, 3330538.678134933],[869.3868882176236, 19666379.80841264],[857.3820879618327, 22813366.166666687],[812.5071964263915, 46340733.30000007],[817.7015501976014, 40894058.599999905],];\nconst ranges = [([16, 32]),([32, 64]),([64, 128]),([128, 256]),([256, 512]),([512, 1024]),([1024, 2048]),([2048, 4096]),([4096, 8192]),([8192, 16384]),([16384, 32768]),([32768, 65536]),([65536, 131072]),([131072, 262144]),([262144, 524288]),([524288, 1048576]),([1048576, 2097152]),];\nfor (let i = 0; i < ranges.length; i++) {\n    const [start, end] = ranges[i];\n    if (n >= start && n <= end) {\n        return n * polynomials[i][0] + polynomials[i][1];\n    }\n}\nif (n < ranges[0][0]) {\n    return n * polynomials[0][0] + polynomials[0][1];\n} else if (n > ranges[ranges.length - 1][1]) {\n    return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n}\nthrow new Error('Size out of range');"}, "msm_G2": {"arguments": "n", "body": "const polynomials = [[-73033.08324240978, 2912147.8303511534],[6392.292479990185, 370535.8072343543],[5631.935211807791, 419198.6723980275],[6075.994050398891, 362359.14105836675],[5124.918095379629, 605834.5855432977],[5000.346873632639, 669615.051077757],[3714.899831505186, 1985912.8222162686],[3136.4775538032973, 3170521.6469497364],[3124.3327433639593, 3220266.790509265],[3406.9239358835384, 905279.7413888723],[2709.608642086452, 12330093.514960334],[2791.1813680364216, 9657118.431031734],[2618.265226491292, 20989350.683333337],[2310.5000339508056, 61328750.0],[2323.3817573547362, 57951883.5],[1874.9908845901487, 293037837.4000001],[2148.652414512634, 6082925.0],];\nconst ranges = [([16, 32]),([32, 64]),([64, 128]),([128, 256]),([256, 512]),([512, 1024]),([1024, 2048]),([2048, 4096]),([4096, 8192]),([8192, 16384]),([16384, 32768]),([32768, 65536]),([65536, 131072]),([131072, 262144]),([262144, 524288]),([524288, 1048576]),([1048576, 2097152]),];\nfor (let i = 0; i < ranges.length; i++) {\n    const [start, end] = ranges[i];\n    if (n >= start && n <= end) {\n        return n * polynomials[i][0] + polynomials[i][1];\n    }\n}\nif (n < ranges[0][0]) {\n    return n * polynomials[0][0] + polynomials[0][1];\n} else if (n > ranges[ranges.length - 1][1]) {\n    return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n}\nthrow new Error('Size out of range');"}, "invert": {"arguments": "n", "body": "return n * 1443;"}, "pairing": {"arguments": "n", "body": "return n * 499450;"}, "pairing_product": {"arguments": "n", "body": "const polynomials = [[152862.7221463144, 286572.1433549775],[167033.7136626433, -166899.5851675477],[144591.87024845672, 1269378.393340394],[150671.22984232398, 491220.36532538384],[155068.92337650355, -634589.1794245839],[151775.12994377015, 1051833.0581349134],];\nconst ranges = [([16, 32]),([32, 64]),([64, 128]),([128, 256]),([256, 512]),([512, 1024]),];\nfor (let i = 0; i < ranges.length; i++) {\n    const [start, end] = ranges[i];\n    if (n >= start && n <= end) {\n        return n * polynomials[i][0] + polynomials[i][1];\n    }\n}\nif (n < ranges[0][0]) {\n    return n * polynomials[0][0] + polynomials[0][1];\n} else if (n > ranges[ranges.length - 1][1]) {\n    return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n}\nthrow new Error('Size out of range');"}}
{"mul_ff": {"arguments": "n", "body": "return n * 24;"}, "mul_ec": {"arguments": "n", "body": "return n * 100297;"}, "add_ff": {"arguments": "n", "body": "return n * 8;"}, "add_ec": {"arguments": "n", "body": "return n * 787;"}, "msm_G1": {"arguments": "n", "body": "\n        const polynomials = [[65801.22282881144, 151952.2239943652], [47836.802757650556, 223809.90427900874], [43872.20947541138, 255526.65053692216], [-5383.839697475174, 1043623.437303107], [14240.783165635308, 415635.50568357157], [13002.933171340155, 494857.90531846136], [11831.931457868282, 644746.1246428611], [10084.286580636166, 1092143.2132142829], [9757.548713867183, 1259433.001000002], [7797.547261718761, 3266474.487999987], [8371.51115722656, 2090996.4300000146], [6339.732082519531, 10413163.520000003], [6311.341809082031, 10645736.64], [5832.171228027344, 18496467.439999998], [5486.893273925782, 29810535.439999998], [5619.012218627929, 21151988.28000009], [4930.3581795501705, 111415250.49000001], [4539.638807754517, 213839989.48999977], [4529.542583198548, 219133318.8699999], [4393.045962057113, 362260399.88000107]];\n        const ranges = [[2, 4], [4, 8], [8, 16], [16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024], [1024, 2048], [2048, 4096], [4096, 8192], [8192, 16384], [16384, 32768], [32768, 65536], [65536, 131072], [131072, 262144], [262144, 524288], [524288, 1048576], [1048576, 2097152]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}, "msm_G2": {"arguments": "n", "body": "\n        const polynomials = [[188632.43220555893, 375890.55407012464], [132619.62537823216, 599941.7813794317], [123373.76030460207, 673908.7019684725], [-27887.45779176202, 3094088.191510298], [38899.45497373186, 956906.9830144937], [34866.56704513894, 1215011.8104444407], [31615.775815972193, 1631113.087777784], [27152.79069661459, 2773637.2783333305], [25949.129658203125, 3389911.7300000004], [20513.730419921878, 8955760.549999997], [22789.729750976563, 4294513.920000002], [16856.610705566407, 28596569.53], [16816.649617919924, 28923930.75999999], [16217.854688110347, 38734586.890000105], [14689.24157562256, 88824181.3599999], [14793.278120269777, 82006042.36999989], [13384.002336273192, 266722637.9300003], [11978.977695770263, 635041417.29], [11984.116245250703, 632347337.4599991], [11841.637617263792, 781747007.2800026]];\n        const ranges = [[2, 4], [4, 8], [8, 16], [16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024], [1024, 2048], [2048, 4096], [4096, 8192], [8192, 16384], [16384, 32768], [32768, 65536], [65536, 131072], [131072, 262144], [262144, 524288], [524288, 1048576], [1048576, 2097152]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}, "invert": {"arguments": "n", "body": "return n * 1758;"}, "pairing": {"arguments": "n", "body": "return n * 801561;"}, "pairing_product": {"arguments": "n", "body": "\n        const polynomials = [[247114.5461979166, 411965.04500000086], [242524.53145833334, 558845.5166666657], [245211.05234375, 386908.1799999997], [242859.10953125, 687956.8599999994], [243431.21808593752, 541497.0699999928], [244591.78826171873, -52714.8599999845]];\n        const ranges = [[16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}}
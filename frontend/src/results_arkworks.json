{"mul": {"arguments": "n", "body": "return 0 + n * 16;"}, "add_ff": {"arguments": "n", "body": "return 0 + n * 3;"}, "msm_G1": {"arguments": "n", "body": "const polynomials = [[15426.847701282073, 319971.9828329114],[10067.062287449022, 491485.11607556907],[4690.4151192661375, 835590.5348392737],[7349.400368949644, 495240.42287978483],[1228.0848747354084, 2062297.1893986291],[2256.708216883854, 1535642.038218625],[2268.82287860577, 1523236.6246153833],[1609.1568766276064, 2874232.596666662],[2107.2989575195306, 833842.6333333403],[1960.7160371907548, 2034649.9166666716],[1464.0048602294924, 10172765.839999996],[1263.1759390258787, 16753527.930000007],[1419.8409341430663, 6486330.810000002],[1141.061333847046, 43026530.57999998],[1218.1609410095216, 22815331.159999967],[1611.7062257766722, -183515739.0999999],[1209.8805463600158, 237829024.51999998],];\nconst ranges = [([16, 32]),([32, 64]),([64, 128]),([128, 256]),([256, 512]),([512, 1024]),([1024, 2048]),([2048, 4096]),([4096, 8192]),([8192, 16384]),([16384, 32768]),([32768, 65536]),([65536, 131072]),([131072, 262144]),([262144, 524288]),([524288, 1048576]),([1048576, 2097152]),];\nfor (let i = 0; i < ranges.length; i++) {\n    const [start, end] = ranges[i];\n    if (n >= start && n <= end) {\n        return n * polynomials[i][0] + polynomials[i][1];\n    }\n}\nif (n < ranges[0][0]) {\n    return n * polynomials[0][0] + polynomials[0][1];\n} else if (n > ranges[ranges.length - 1][1]) {\n    return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n}\nthrow new Error('Size out of range');"}, "msm_G2": {"arguments": "n", "body": "const polynomials = [[22832.603308952603, 871707.9703862714],[18129.644178976436, 1022202.6625455087],[10988.08693933823, 1479262.3258823538],[10340.868463924628, 1562106.290735295],[7368.209951171877, 2323106.869999999],[5273.895768229158, 3395395.731666671],[6593.31197916667, 2044313.5316666588],[5886.049697265626, 3492786.6849999987],[5495.026297607422, 5094418.530000001],[5393.708572998047, 5924413.329999998],[5415.776265258788, 5562856.26000002],[3141.6175061035165, 80082490.47999996],[3769.150556640625, 38956484.48000002],[3379.9189376831055, 89973851.24000001],[3675.2800148010256, 12546717.039999962],[5038.793685531616, -702327138.3599997],[2888.904026660919, 1551995560.58],];\nconst ranges = [([16, 32]),([32, 64]),([64, 128]),([128, 256]),([256, 512]),([512, 1024]),([1024, 2048]),([2048, 4096]),([4096, 8192]),([8192, 16384]),([16384, 32768]),([32768, 65536]),([65536, 131072]),([131072, 262144]),([262144, 524288]),([524288, 1048576]),([1048576, 2097152]),];\nfor (let i = 0; i < ranges.length; i++) {\n    const [start, end] = ranges[i];\n    if (n >= start && n <= end) {\n        return n * polynomials[i][0] + polynomials[i][1];\n    }\n}\nif (n < ranges[0][0]) {\n    return n * polynomials[0][0] + polynomials[0][1];\n} else if (n > ranges[ranges.length - 1][1]) {\n    return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n}\nthrow new Error('Size out of range');"}, "invert": {"arguments": "n", "body": "return 0 + n * 1830;"}, "pairing": {"arguments": "n", "body": "return 0 + n * 934521;"}, "pairing_product": {"arguments": "n", "body": "const polynomials = [[121543.99987499995, 1440989.3320000013],[119067.36641666671, 1520241.6026666649],[131805.34302083327, 705011.1000000052],[131227.44944010416, 778981.4783333316],[127481.07642578127, 1738052.9699999914],[128859.06435546874, 1032523.150000006],];\nconst ranges = [([16, 32]),([32, 64]),([64, 128]),([128, 256]),([256, 512]),([512, 1024]),];\nfor (let i = 0; i < ranges.length; i++) {\n    const [start, end] = ranges[i];\n    if (n >= start && n <= end) {\n        return n * polynomials[i][0] + polynomials[i][1];\n    }\n}\nif (n < ranges[0][0]) {\n    return n * polynomials[0][0] + polynomials[0][1];\n} else if (n > ranges[ranges.length - 1][1]) {\n    return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n}\nthrow new Error('Size out of range');"}}
{"mul": {"arguments": "n", "body": "return n * 16;"}, "add_ff": {"arguments": "n", "body": "return n * 3;"}, "add_ec": {"arguments": "n", "body": "return n * 549;"}, "msm_G1": {"arguments": "n", "body": "\n        const polynomials = [[85249.5712104342, 182557.50782055175], [4174.613619566546, 344707.42300228705], [19229.0675631724, 284489.6072278636], [35462.79080482721, 154619.82129462517], [17512.99731860822, 441816.51707412896], [-3785.2588831172725, 1123360.7155293447], [14014.533262183915, -15825.98176993127], [437.5279399660394, 1722030.6994739568], [5073.544129611134, 535210.5549248126], [1843.8907616114338, 2188793.079340659], [1996.7723336505078, 2032242.3495726474], [5037.510817925349, -4195190.066222228], [20.418581787108906, 16354819.733000005], [1581.4338427734376, 3566982.715], [1739.695370788574, 974025.8400000036], [1280.2239233398436, 16029986.230000004], [1295.0235736083985, 15060076.349999994], [1291.0712951660157, 15578109.389999986], [1192.6149714660646, 41387843.90999997], [1215.1070514678952, 29595516.27000022], [1496.8862513923646, -265871390.07000017]];\n        const ranges = [[1, 2], [2, 4], [4, 8], [8, 16], [16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024], [1024, 2048], [2048, 4096], [4096, 8192], [8192, 16384], [16384, 32768], [32768, 65536], [65536, 131072], [131072, 262144], [262144, 524288], [524288, 1048576], [1048576, 2097152]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}, "msm_G2": {"arguments": "n", "body": "\n        const polynomials = [[-56259.07661411422, 690676.693987803], [99109.1558580285, 379940.2290435175], [12512.834792762063, 726325.5133045833], [84365.05167633589, 151507.77823599265], [12362.472270681872, 1303549.048726457], [19474.124771957264, 1075976.1686856444], [8511.073652597406, 1777611.4403246753], [5671.373284970228, 2141093.087380954], [8771.340726996525, 1347501.4222222222], [6093.728663194457, 2718438.7988888808], [6897.528473307288, 1895347.7933333423], [5162.676361490886, 5448324.918333333], [5516.513669433592, 3999007.305000007], [4893.961461791992, 9098954.989999995], [5107.1133642578125, 5606674.219999999], [3186.4774209594725, 68542072.81], [3448.399149017334, 51376770.44], [4112.428735961914, -35658915.58000004], [6162.383419647216, -573042236.1799998], [2650.7136177062994, 1268084100.9399996], [3562.297763843536, 312218843.32000065]];\n        const ranges = [[1, 2], [2, 4], [4, 8], [8, 16], [16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024], [1024, 2048], [2048, 4096], [4096, 8192], [8192, 16384], [16384, 32768], [32768, 65536], [65536, 131072], [131072, 262144], [262144, 524288], [524288, 1048576], [1048576, 2097152]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}, "invert": {"arguments": "n", "body": "return n * 1847;"}, "pairing": {"arguments": "n", "body": "return n * 941022;"}, "pairing_product": {"arguments": "n", "body": "\n        const polynomials = [[115300.63065625008, 1353243.1119999988], [129785.14896874985, 889738.5260000061], [132785.54932291675, 697712.9033333249], [129869.46385416668, 1070971.8433333337], [128738.90628906246, 1360394.580000013], [132035.159375, -327287.0]];\n        const ranges = [[16, 32], [32, 64], [64, 128], [128, 256], [256, 512], [512, 1024]];\n        for (let i = 0; i < ranges.length; i++) {\n            const [start, end] = ranges[i];\n            if (n >= start && n <= end) {\n                return n * polynomials[i][0] + polynomials[i][1];\n            }\n        }\n        if (n < ranges[0][0]) {\n            return n * polynomials[0][0] + polynomials[0][1];\n        } else if (n > ranges[ranges.length - 1][1]) {\n            return n * polynomials[polynomials.length - 1][0] + polynomials[polynomials.length - 1][1];\n        }\n        throw new Error('Size out of range')\n        "}}